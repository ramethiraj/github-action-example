name: Deploy to Azure [Dev]
run-name: Deploying changes from ${{ github.actor }}

on:
  push:
    branches:
      - clouddevelop

 

jobs:

  build:
  
    name: Build|Validate|Deploy #[Java(Maven Build,Sonar Scan),Docker Image,Prisma Scan,K8s]
    environment: dev
    runs-on: [ uhg-runner ]

 

    steps:
      - uses: actions/checkout@v3

 

      - name: SonarQube Scan
        uses: github-actions/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonar.example.com


      - name: Docker login
        uses: Azure/docker-login@v1
        with:
          login-server: ${{ vars.ACR_NAME }}.azurecr.io
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
 

      - name: Build the Docker image
        run: |
          docker build -f Dockerfile --tag ${{ vars.ACR_NAME }}.azurecr.io/test-code-main:${{github.run_number}} .

 
      - name: Prisma Cloud image scan
        id: scan
        env:
          NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/test_Root_CA.crt

        uses: PaloAltoNetworks/prisma-cloud-scan@v1.5
        with:
          pcc_console_url: https://containersecurity.example.com
          pcc_user: "ms\\${{ secrets.TWISTLOCK_USER }}"
          pcc_pass: ${{ secrets.TWISTLOCK_PASSWORD }}
          image_name: ${{ vars.ACR_NAME }}.azurecr.io/test-code-main:${{github.run_number}}
          docker_tlscacert: "/certs/client/ca.pem"
          docker_tlscert: "/certs/client/cert.pem"
          docker_tlskey: "/certs/client/key.pem"

         
      - name: Upload SARIF file
        if: ${{ always() }} # necessary if using failure thresholds in the image scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif_file }}
         

      - name: Push the Docker image
        run: |
          docker push ${{ vars.ACR_NAME }}.azurecr.io/test-code-main:${{github.run_number}}

    
      - name: Install kubectl
        uses: azure/setup-kubectl@v3.0

 

      # login to Azure.
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

 
      # Set the target AKS cluster.
      - uses: Azure/aks-set-context@v3
        with:
          cluster-name: ${{ vars.AZURE_AKS_CLUSTER }}
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          admin: 'false'
          use-kubelogin: 'true'

 
      - uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          force: 'false' #enforce to true if a deployment is needed disregarding the changes to code (or not)
          namespace: orx-it-mt-dev
          manifests: |
            manifests/configmap.yml
            manifests/deployment.yml
            manifests/service.yml
          images: |
            ${{ vars.ACR_NAME }}.azurecr.io/test-code-main:${{github.run_number}}
